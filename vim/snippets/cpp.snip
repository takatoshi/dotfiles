snippet cocos2dx_h
    #include "cocos2d.h"

    class ${1} : public cocos2d::Layer
    {
    private:
        cocos2d::Size visibleSize;
    public:
        static cocos2d::Scene* createScene();
        virtual bool init();
        CREATE_FUNC($1);

        virtual bool onTouchBegan(cocos2d::Touch *touch, cocos2d::Event *unused_event);
        virtual void onTouchMoved(cocos2d::Touch *touch, cocos2d::Event *unused_event);
        virtual void onTouchEnded(cocos2d::Touch *touch, cocos2d::Event *unused_event);
        void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event * event);
        void setEventListener();
    };
snippet cocos2dx_cpp
    USING_NS_CC;

    Scene* ${1}::createScene()
    {
        auto scene = Scene::create();
        auto layer = $1::create();
        scene->addChild(layer);

        return scene;
    }

    bool $1::init()
    {
        if ( !Layer::init() )
        {
            return false;
        }

        visibleSize = Director::getInstance()->getVisibleSize();

        this->setEventListener();

        return true;
    }

    bool $1::onTouchBegan(cocos2d::Touch *touch, cocos2d::Event *unused_event) {
        Vec2 location = touch->getLocation();

        return true;
    }

    void $1::onTouchMoved(cocos2d::Touch *touch, cocos2d::Event *unused_event) {
        Vec2 location = touch->getLocation();

    }

    void $1::onTouchEnded(cocos2d::Touch *touch, cocos2d::Event *unused_event)  {
        Vec2 location = touch->getLocation();
    }

    void $1::onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event * event) {
        if (keyCode == EventKeyboard::KeyCode::KEY_BACKSPACE) {
        }
        event->stopPropagation();
    }

    void $1::setEventListener() {
        auto listener = EventListenerTouchOneByOne::create();
        listener->onTouchBegan = CC_CALLBACK_2($1::onTouchBegan, this);
        listener->onTouchMoved = CC_CALLBACK_2($1::onTouchMoved, this);
        listener->onTouchEnded = CC_CALLBACK_2($1::onTouchEnded, this);
        this->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, this);

        auto keyboardListener = EventListenerKeyboard::create();
        keyboardListener->onKeyReleased = CC_CALLBACK_2($1::onKeyReleased, this);
        this->getEventDispatcher()->addEventListenerWithSceneGraphPriority(keyboardListener, this);
    }
